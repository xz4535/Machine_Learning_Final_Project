# https://www.kaggle.com/code/anandhuh/extracting-visualizing-stock-data-2022
# pip install yfinance
# pip install bs4

import pandas as pd

import yfinance as yf
import requests
from bs4 import BeautifulSoup

import plotly.graph_objects as go
from plotly.subplots import make_subplots

def plot_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price ($)", "Historical Revenue ($)"), vertical_spacing = .5)
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data.Date, infer_datetime_format=True), y=stock_data.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data.Date, infer_datetime_format=True), y=revenue_data.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($ Millions)", row=2, col=1)
    fig.update_layout(showlegend=False, height=1000, title=stock, xaxis_rangeslider_visible=True)
    fig.show()

# Using the Ticker function to create a ticker object.
# ticker symbol of Google is GOOGL for Class A shares or GOOG for Class C shares
google_data = yf.Ticker('GOOGL')  # You can replace 'GOOGL' with 'GOOG' if you prefer

# history function helps to extract stock information.
# setting period to 1 day and interval to 1 minute to get information at minute-level granularity
google_data_daily = google_data.history(period='2y', interval='1d')

# Filter for the year 2023
google_data_2023 = google_data_daily.loc[google_data_daily.index.year == 2023]
# Save the 2023 data to a CSV file
google_data_2023.to_csv('google_stock_data_2023.csv', index=True)


# Filter for the year 2024
google_data_2024 = google_data_daily.loc[google_data_daily.index.year == 2024]
# Save the 2024 data to a CSV file
google_data_2024.to_csv('google_stock_data_2024.csv', index=True)

# # Save the DataFrame to a CSV file
# google_data_min.to_csv('google_stock_data.csv', index=False)

# Print out information to confirm the process
print("Saved 2023 data with {} rows".format(len(google_data_2023)))
print("Saved 2024 data with {} rows".format(len(google_data_2024)))
# # display the first twenty rows with explicit time format to see the one-minute interval
# print(google_data_min.head(5).to_string(index=False))

# # Using the Ticker function to create a ticker object.
# # ticker symbol of tesla is TSLA
# tesla_data = yf.Ticker('TSLA')

# # history function helps to extract stock information.
# # setting period parameter to max to get information for the maximum amount of time.
# tsla_data = tesla_data.history(period='max')

# # Resetting the index
# tsla_data.reset_index(inplace=True)

# # display the first five rows
# tsla_data.head()

# print (tsla_data)



